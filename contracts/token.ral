Contract LendingBorrowing(collateralTokenId: ByteVec, loanTokenId: ByteVec, collateralRatio: U256, mut totalCollateral: U256) {
    mapping[Address, U256] borrowedAmount
    mapping[Address, U256] loanTimestamp

    event LoanGranted(borrower: Address, loanAmount: U256)
    event CollateralDeposited(depositor: Address, collateralAmount: U256)
    event LoanRepaid(borrower: Address, repaymentAmount: U256, collateralReturned: U256)

    @using(preapprovedAssets = true, assetsInContract = true, updateFields = true, checkExternalCaller = false)
    pub fn depositCollateral(caller: Address, collateralAmount: U256) -> () {
        transferTokenToSelf!(caller, collateralTokenId, collateralAmount)

        totalCollateral = totalCollateral + collateralAmount
        
        emit CollateralDeposited(caller, collateralAmount)
    }

    @using(assetsInContract = true, checkExternalCaller = false)
    pub fn borrow(caller: Address) -> () {
        let collateral = totalCollateral
        let loanAmount = collateral / collateralRatio

        loanTimestamp.insert!(caller, caller, blockTimeStamp!())
        
        borrowedAmount[caller] = borrowedAmount[caller] + loanAmount

        transferTokenFromSelf!(caller, loanTokenId, loanAmount)

        emit LoanGranted(caller, loanAmount)
    }

    @using(preapprovedAssets = true, assetsInContract = true, updateFields = true, checkExternalCaller = false)
    pub fn repayLoan(caller: Address, repaymentAmount: U256) -> () {
        assert!(repaymentAmount == borrowedAmount[caller], 1) // Error 1: Incorrect repayment amount

        let borrowTime = loanTimestamp[caller]
        assert!(blockTimeStamp!() - borrowTime <= 7200000, 2) // Error 2: Repayment past due

        transferTokenToSelf!(caller, loanTokenId, repaymentAmount)

        borrowedAmount[caller] = borrowedAmount[caller] - repaymentAmount
        loanTimestamp.remove!(caller, caller)

        let collateralToReturn = repaymentAmount * collateralRatio
        assert!(totalCollateral >= collateralToReturn, 3) // Error 3: Insufficient collateral in contract

        totalCollateral = totalCollateral - collateralToReturn

        transferTokenFromSelf!(caller, collateralTokenId, collateralToReturn)

        emit LoanRepaid(caller, repaymentAmount, collateralToReturn)
    }
}
