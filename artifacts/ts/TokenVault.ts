/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as TokenVaultContractJson } from "../TokenVault.ral.json";
import { getContractByCodeHash } from "./contracts";

import { RalphMap } from "@alephium/web3";

// Custom types for the contract
export namespace TokenVaultTypes {
  export type Fields = {
    tokenHeldId: HexString;
    amountHeld: bigint;
    tokenReleasedId: HexString;
    amountToRelease: bigint;
  };

  export type State = ContractState<Fields>;

  export type TokenReleasedEvent = ContractEvent<{
    to: Address;
    amount: bigint;
  }>;
  export type DepositRecordedEvent = ContractEvent<{
    depositor: Address;
    timestamp: bigint;
  }>;

  export interface CallMethodTable {
    initialize: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
    deposit: {
      params: CallContractParams<{ caller: Address; depositAmount: bigint }>;
      result: CallContractResult<null>;
    };
    releaseIfAllowed: {
      params: CallContractParams<{ to: Address }>;
      result: CallContractResult<null>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    initialize: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    deposit: {
      params: SignExecuteContractMethodParams<{
        caller: Address;
        depositAmount: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    releaseIfAllowed: {
      params: SignExecuteContractMethodParams<{ to: Address }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];

  export type Maps = { depositorTimestamp?: Map<Address, bigint> };
}

class Factory extends ContractFactory<
  TokenVaultInstance,
  TokenVaultTypes.Fields
> {
  encodeFields(fields: TokenVaultTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      []
    );
  }

  eventIndex = { TokenReleased: 0, DepositRecorded: 1 };

  at(address: string): TokenVaultInstance {
    return new TokenVaultInstance(address);
  }

  tests = {
    initialize: async (
      params: Omit<
        TestContractParams<TokenVaultTypes.Fields, never, TokenVaultTypes.Maps>,
        "testArgs"
      >
    ): Promise<TestContractResult<null, TokenVaultTypes.Maps>> => {
      return testMethod(this, "initialize", params, getContractByCodeHash);
    },
    deposit: async (
      params: TestContractParams<
        TokenVaultTypes.Fields,
        { caller: Address; depositAmount: bigint },
        TokenVaultTypes.Maps
      >
    ): Promise<TestContractResult<null, TokenVaultTypes.Maps>> => {
      return testMethod(this, "deposit", params, getContractByCodeHash);
    },
    releaseIfAllowed: async (
      params: TestContractParams<
        TokenVaultTypes.Fields,
        { to: Address },
        TokenVaultTypes.Maps
      >
    ): Promise<TestContractResult<null, TokenVaultTypes.Maps>> => {
      return testMethod(
        this,
        "releaseIfAllowed",
        params,
        getContractByCodeHash
      );
    },
  };

  stateForTest(
    initFields: TokenVaultTypes.Fields,
    asset?: Asset,
    address?: string,
    maps?: TokenVaultTypes.Maps
  ) {
    return this.stateForTest_(initFields, asset, address, maps);
  }
}

// Use this object to test and deploy the contract
export const TokenVault = new Factory(
  Contract.fromJson(
    TokenVaultContractJson,
    "=8-1=1+e=2-2+af=39-1+9=78+7a7e0214696e73657274206174206d617020706174683a2000=182",
    "ecd992e668b79ea29667d634f1c2fc9ba16f3cf0b03122453422489656ab1470",
    []
  )
);

// Use this class to interact with the blockchain
export class TokenVaultInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  maps = {
    depositorTimestamp: new RalphMap<Address, bigint>(
      TokenVault.contract,
      this.contractId,
      "depositorTimestamp"
    ),
  };

  async fetchState(): Promise<TokenVaultTypes.State> {
    return fetchContractState(TokenVault, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeTokenReleasedEvent(
    options: EventSubscribeOptions<TokenVaultTypes.TokenReleasedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      TokenVault.contract,
      this,
      options,
      "TokenReleased",
      fromCount
    );
  }

  subscribeDepositRecordedEvent(
    options: EventSubscribeOptions<TokenVaultTypes.DepositRecordedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      TokenVault.contract,
      this,
      options,
      "DepositRecorded",
      fromCount
    );
  }

  subscribeAllEvents(
    options: EventSubscribeOptions<
      TokenVaultTypes.TokenReleasedEvent | TokenVaultTypes.DepositRecordedEvent
    >,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(
      TokenVault.contract,
      this,
      options,
      fromCount
    );
  }

  view = {
    initialize: async (
      params?: TokenVaultTypes.CallMethodParams<"initialize">
    ): Promise<TokenVaultTypes.CallMethodResult<"initialize">> => {
      return callMethod(
        TokenVault,
        this,
        "initialize",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    deposit: async (
      params: TokenVaultTypes.CallMethodParams<"deposit">
    ): Promise<TokenVaultTypes.CallMethodResult<"deposit">> => {
      return callMethod(
        TokenVault,
        this,
        "deposit",
        params,
        getContractByCodeHash
      );
    },
    releaseIfAllowed: async (
      params: TokenVaultTypes.CallMethodParams<"releaseIfAllowed">
    ): Promise<TokenVaultTypes.CallMethodResult<"releaseIfAllowed">> => {
      return callMethod(
        TokenVault,
        this,
        "releaseIfAllowed",
        params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    initialize: async (
      params: TokenVaultTypes.SignExecuteMethodParams<"initialize">
    ): Promise<TokenVaultTypes.SignExecuteMethodResult<"initialize">> => {
      return signExecuteMethod(TokenVault, this, "initialize", params);
    },
    deposit: async (
      params: TokenVaultTypes.SignExecuteMethodParams<"deposit">
    ): Promise<TokenVaultTypes.SignExecuteMethodResult<"deposit">> => {
      return signExecuteMethod(TokenVault, this, "deposit", params);
    },
    releaseIfAllowed: async (
      params: TokenVaultTypes.SignExecuteMethodParams<"releaseIfAllowed">
    ): Promise<TokenVaultTypes.SignExecuteMethodResult<"releaseIfAllowed">> => {
      return signExecuteMethod(TokenVault, this, "releaseIfAllowed", params);
    },
  };
}
