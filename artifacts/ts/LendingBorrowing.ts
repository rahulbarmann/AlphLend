/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as LendingBorrowingContractJson } from "../LendingBorrowing.ral.json";
import { getContractByCodeHash } from "./contracts";

import { RalphMap } from "@alephium/web3";

// Custom types for the contract
export namespace LendingBorrowingTypes {
  export type Fields = {
    collateralTokenId: HexString;
    loanTokenId: HexString;
    collateralRatio: bigint;
    totalCollateral: bigint;
  };

  export type State = ContractState<Fields>;

  export type LoanGrantedEvent = ContractEvent<{
    borrower: Address;
    loanAmount: bigint;
  }>;
  export type CollateralDepositedEvent = ContractEvent<{
    depositor: Address;
    collateralAmount: bigint;
  }>;
  export type LoanRepaidEvent = ContractEvent<{
    borrower: Address;
    repaymentAmount: bigint;
    collateralReturned: bigint;
  }>;

  export interface CallMethodTable {
    depositCollateral: {
      params: CallContractParams<{ caller: Address; collateralAmount: bigint }>;
      result: CallContractResult<null>;
    };
    borrow: {
      params: CallContractParams<{ caller: Address }>;
      result: CallContractResult<null>;
    };
    repayLoan: {
      params: CallContractParams<{ caller: Address; repaymentAmount: bigint }>;
      result: CallContractResult<null>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    depositCollateral: {
      params: SignExecuteContractMethodParams<{
        caller: Address;
        collateralAmount: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    borrow: {
      params: SignExecuteContractMethodParams<{ caller: Address }>;
      result: SignExecuteScriptTxResult;
    };
    repayLoan: {
      params: SignExecuteContractMethodParams<{
        caller: Address;
        repaymentAmount: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];

  export type Maps = {
    borrowedAmount?: Map<Address, bigint>;
    loanTimestamp?: Map<Address, bigint>;
  };
}

class Factory extends ContractFactory<
  LendingBorrowingInstance,
  LendingBorrowingTypes.Fields
> {
  encodeFields(fields: LendingBorrowingTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      []
    );
  }

  eventIndex = { LoanGranted: 0, CollateralDeposited: 1, LoanRepaid: 2 };

  at(address: string): LendingBorrowingInstance {
    return new LendingBorrowingInstance(address);
  }

  tests = {
    depositCollateral: async (
      params: TestContractParams<
        LendingBorrowingTypes.Fields,
        { caller: Address; collateralAmount: bigint },
        LendingBorrowingTypes.Maps
      >
    ): Promise<TestContractResult<null, LendingBorrowingTypes.Maps>> => {
      return testMethod(
        this,
        "depositCollateral",
        params,
        getContractByCodeHash
      );
    },
    borrow: async (
      params: TestContractParams<
        LendingBorrowingTypes.Fields,
        { caller: Address },
        LendingBorrowingTypes.Maps
      >
    ): Promise<TestContractResult<null, LendingBorrowingTypes.Maps>> => {
      return testMethod(this, "borrow", params, getContractByCodeHash);
    },
    repayLoan: async (
      params: TestContractParams<
        LendingBorrowingTypes.Fields,
        { caller: Address; repaymentAmount: bigint },
        LendingBorrowingTypes.Maps
      >
    ): Promise<TestContractResult<null, LendingBorrowingTypes.Maps>> => {
      return testMethod(this, "repayLoan", params, getContractByCodeHash);
    },
  };

  stateForTest(
    initFields: LendingBorrowingTypes.Fields,
    asset?: Asset,
    address?: string,
    maps?: LendingBorrowingTypes.Maps
  ) {
    return this.stateForTest_(initFields, asset, address, maps);
  }
}

// Use this object to test and deploy the contract
export const LendingBorrowing = new Factory(
  Contract.fromJson(
    LendingBorrowingContractJson,
    "=8-2+a=1-1=1+1=1+9=75-1+f=72+7a7e0214696e73657274206174206d617020706174683a2000=143-1+8=284+7a7e021472656d6f7665206174206d617020706174683a2000=78",
    "0f7853c0a412410930b064f3379ff8bf1c519e31f6ccf94336faa682ec67a043",
    []
  )
);

// Use this class to interact with the blockchain
export class LendingBorrowingInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  maps = {
    borrowedAmount: new RalphMap<Address, bigint>(
      LendingBorrowing.contract,
      this.contractId,
      "borrowedAmount"
    ),
    loanTimestamp: new RalphMap<Address, bigint>(
      LendingBorrowing.contract,
      this.contractId,
      "loanTimestamp"
    ),
  };

  async fetchState(): Promise<LendingBorrowingTypes.State> {
    return fetchContractState(LendingBorrowing, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeLoanGrantedEvent(
    options: EventSubscribeOptions<LendingBorrowingTypes.LoanGrantedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      LendingBorrowing.contract,
      this,
      options,
      "LoanGranted",
      fromCount
    );
  }

  subscribeCollateralDepositedEvent(
    options: EventSubscribeOptions<LendingBorrowingTypes.CollateralDepositedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      LendingBorrowing.contract,
      this,
      options,
      "CollateralDeposited",
      fromCount
    );
  }

  subscribeLoanRepaidEvent(
    options: EventSubscribeOptions<LendingBorrowingTypes.LoanRepaidEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      LendingBorrowing.contract,
      this,
      options,
      "LoanRepaid",
      fromCount
    );
  }

  subscribeAllEvents(
    options: EventSubscribeOptions<
      | LendingBorrowingTypes.LoanGrantedEvent
      | LendingBorrowingTypes.CollateralDepositedEvent
      | LendingBorrowingTypes.LoanRepaidEvent
    >,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(
      LendingBorrowing.contract,
      this,
      options,
      fromCount
    );
  }

  view = {
    depositCollateral: async (
      params: LendingBorrowingTypes.CallMethodParams<"depositCollateral">
    ): Promise<LendingBorrowingTypes.CallMethodResult<"depositCollateral">> => {
      return callMethod(
        LendingBorrowing,
        this,
        "depositCollateral",
        params,
        getContractByCodeHash
      );
    },
    borrow: async (
      params: LendingBorrowingTypes.CallMethodParams<"borrow">
    ): Promise<LendingBorrowingTypes.CallMethodResult<"borrow">> => {
      return callMethod(
        LendingBorrowing,
        this,
        "borrow",
        params,
        getContractByCodeHash
      );
    },
    repayLoan: async (
      params: LendingBorrowingTypes.CallMethodParams<"repayLoan">
    ): Promise<LendingBorrowingTypes.CallMethodResult<"repayLoan">> => {
      return callMethod(
        LendingBorrowing,
        this,
        "repayLoan",
        params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    depositCollateral: async (
      params: LendingBorrowingTypes.SignExecuteMethodParams<"depositCollateral">
    ): Promise<
      LendingBorrowingTypes.SignExecuteMethodResult<"depositCollateral">
    > => {
      return signExecuteMethod(
        LendingBorrowing,
        this,
        "depositCollateral",
        params
      );
    },
    borrow: async (
      params: LendingBorrowingTypes.SignExecuteMethodParams<"borrow">
    ): Promise<LendingBorrowingTypes.SignExecuteMethodResult<"borrow">> => {
      return signExecuteMethod(LendingBorrowing, this, "borrow", params);
    },
    repayLoan: async (
      params: LendingBorrowingTypes.SignExecuteMethodParams<"repayLoan">
    ): Promise<LendingBorrowingTypes.SignExecuteMethodResult<"repayLoan">> => {
      return signExecuteMethod(LendingBorrowing, this, "repayLoan", params);
    },
  };
}
